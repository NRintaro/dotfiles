[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
" NERDTreeを表示/非表示
nmap <silent> <Space>ne :NERDTreeToggle<CR>
" 起動時にブックマークを表示
let g:NERDTreeShowBookmarks=1
" 選択しているファイルをブックマークに登録
nmap <silent> <Space>a :<C-u>Bookmark<CR>
" 選択しているファイルをブックマークから削除
nmap <silent> <Space>d :<C-u>ClearBookmarks<CR>
" 全ブックマークを削除
nmap <silent> <Space>da :<C-u>ClearAllBookmarks<CR>
" 隠しファイルを表示
let g:NERDTreeShowHidden=1
" 非表示ファイル
let g:NERDTreeIgnore=['\.swp$', '.DS_Store']
" 開いているウィンドウがNERDTreeだけならVimを閉じる
autocmd MyAutoCmd Bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
" NERDTreeを起動する.
autocmd MyAutoCmd VimEnter * execute 'NERDTree'
'''

#インストール方法メモ
#1. https://github.com/ryanoasis/nerd-fonts#font-installation のoption4: Homebrewでフォントをインストールする.
#2. 利用しているターミナルのフォントを手順1でインストールしたFontに変更する.iTerm2なら設定画面>Profiles>Text>Font>Change Fontから設定する.
#3. ryanoasis/vim-deviconsをインストールする.
[[plugins]] # 有名どころのVimプラグインにアイコンを追加する.
repo = 'ryanoasis/vim-devicons'

[[plugins]]
repo = '/usr/local/opt/fzf'

[[plugins]]
repo = '/usr/local/opt/the_silver_searcher'

[[plugins]] # ファイル検索.
repo = 'junegunn/fzf.vim'
depends = ['/usr/local/opt/fzf', '/usr/local/opt/the_silver_searcher']
hook_add = '''
fun! FzfOmniFiles()
  let is_git = system('git status')
  if v:shell_error
    :Files
  else
    :GitFiles
  endif
endfun

nnoremap <C-g> :Ag<Space>
nnoremap <C-d> :GFiles?<CR>
nnoremap <C-p> :call FzfOmniFiles()<CR>
nnoremap <C-c> :Commands<CR>
nnoremap <silent> <Space>h :History<CR>
'''

[[plugins]] # カラースキームを設定
repo = 'tomasr/molokai'
hook_add = '''
set background=dark
" colorscheme 設定は source 後に行う必要があるので確実に読まれている VimEnter のタイミングで行う。
" 但し Colorscheme イベントの発生が抑制されないよう nented を付ける。
" TODO: nestedについて&auとautocmdの違いについて
autocmd MyAutoCmd VimEnter * nested colorscheme molokai
'''

[[plugins]] # ステータスライン
repo = 'itchyny/lightline.vim'

# [[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
" バッファを保存時に差分を認識する.
autocmd MyAutoCmd BufWritePost * GitGutter
" 差分を認識する間隔(ミリ秒).
" set updatetime=100
'''

[[plugins]] # tomlのシンタックスを有効に.
repo = 'cespare/vim-toml'
on_ft = 'toml' # ファイルタイプが toml のものを開いた時にのみプラグインを読み込む.

[[plugins]] # 全角半角の空白文字を可視化.
repo = 'bronson/vim-trailing-whitespace'

[[plugins]] #  インデントを可視化.
repo = 'Yggdroot/indentLine'
hook_add = '''
let g:indentLine_char = '¦'
'''

[[plugins]]
repo = 'Shougo/neocomplete.vim'
hook_add = '''
" Vim起動時にneocompleteを有効にする
let g:neocomplete#enable_at_startup = 1
" smartcase有効化. 大文字が入力されるまで大文字小文字の区別を無視する
let g:neocomplete#enable_smart_case = 1
" 3文字以上の単語に対して補完を有効にする
let g:neocomplete#min_keyword_length = 3
" 区切り文字まで補完する
let g:neocomplete#enable_auto_delimiter = 1
" 1文字目の入力から補完のポップアップを表示
let g:neocomplete#auto_completion_start_length = 1
" バックスペースで補完のポップアップを閉じる
inoremap <expr><BS> neocomplete#smart_close_popup()."<C-h>"
'''

[[plugins]]
repo = 'Shougo/neosnippet.vim'
hook_add = '''
" エンターキーで補完候補&スニペットの展開確定.
imap <expr><CR> neosnippet#expandable() ? "<Plug>(neosnippet_expand_or_jump)" : pumvisible() ? "<C-y>" : "<CR>"
" タブキーで補完候補の選択&スニペット内のジャンプ.
imap <expr><TAB> pumvisible() ? "<C-n>" : neosnippet#jumpable() ? "<Plug>(neosnippet_expand_or_jump)" : "<TAB>"
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

# [[plugins]] # syntaxのチェック.
# repo =  'w0rp/ale'
# hook_add = '''
# " ファイルタイプが変更された時のチェックをオフにする.
# let g:ale_lint_on_filetype_changed = 0
# " バッファの保存時にチェックする.
# let g:ale_lint_on_text_changed = 'never'
# " ファイルを開いた時のチェックを無くす.
# let g:ale_lint_on_enter = 0
# " ファイルがエラーもしくは警告を含むなら loclist で表示する.
# let g:ale_open_list = 1
# '''

[[plugins]] # カーソル位置のコンテキストに合わせて filetype を切り替え.
repo = 'osyo-manga/vim-precious'
depends = ['Shougo/context_filetype.vim']

[[plugins]] # カーソル位置のコンテキストの filetype を判定するライブラリ.
repo = 'Shougo/context_filetype.vim'

[[plugins]] # ウィンドウサイズを変更.
repo = 'simeji/winresizer'
hook_add = '''
let g:winresizer_start_key = '<Space>w'
" enter で完了する.
let g:winresizer_keycode_finish = 13
'''

[[plugins]] # コメントアウト.
repo = 'tyru/caw.vim'

[[plugins]]
repo = 'previm/previm'
hook_add = '''
let g:previm_open_cmd = "open -a 'Google Chrome'"
command! Previm PrevimOpen
'''
on_ft = ['md', 'markdown'] # ファイルタイプが markdown のものを開いた時にのみプラグインを読み込む.

[[plugins]] # emmet.
repo = 'mattn/emmet-vim'
hook_add = '''
let g:user_emmet_leader_key='<C-e>'
" HTML/CSSのみ有効にする.
let g:user_emmet_install_global = 0
autocmd MyAutoCmd FileType html,css EmmetInstall
'''
on_ft = ['html', 'css'] # ファイルタイプが html/css のものを開いた時にのみプラグインを読み込む.

[[plugins]] # helpの日本語版
repo = 'vim-jp/vimdoc-ja'
hook_add = '''
set helplang=ja,en
'''
