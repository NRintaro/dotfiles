
[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
  " NERDTreeを表示/非表示
  map <silent> <Space>ne :NERDTreeToggle<CR>
  " 起動時にブックマークを表示
  let g:NERDTreeShowBookmarks=1
  " 選択しているファイルをブックマークに登録
  map <silent> <Space>a :<C-u>Bookmark<CR>
  " 選択しているファイルをブックマークから削除
  map <silent> <Space>d :<C-u>ClearBookmarks<CR>
  " 全ブックマークを削除
  map <silent> <Space>da :<C-u>ClearAllBookmarks<CR>
  " 隠しファイルを表示
  let g:NERDTreeShowHidden=1
  " 非表示ファイル
  let g:NERDTreeIgnore=['\.swp$', '.DS_Store']
  " 開いているウィンドウがNERDTreeだけならVimを閉じる
  autocmd Bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
'''

[[plugins]] # カラースキームを設定
repo = 'jacoborus/tender.vim'
hook_add = '''
  set background=dark
  " colorscheme 設定は source 後に行う必要があるので確実に読まれている VimEnter のタイミングで行う。
  " 但し Colorscheme イベントの発生が抑制されないよう nented を付ける。
  " TODO: nestedについて&auとautocmdの違いについて
  autocmd MyAutoCmd VimEnter * nested colorscheme tender
'''

[[plugins]]
repo = 'Shougo/neosnippet.vim'
hook_add = '''
  " エンターキーで補完候補&スニペットの展開確定.
  imap <expr><CR> neosnippet#expandable() ? "<Plug>(neosnippet_expand_or_jump)" : pumvisible() ? "<C-y>" : "<CR>"
  " タブキーで補完候補の選択&スニペット内のジャンプ.
  imap <expr><TAB> pumvisible() ? "<C-n>" : neosnippet#jumpable() ? "<Plug>(neosnippet_expand_or_jump)" : "<TAB>"
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'Shougo/neocomplete.vim'
hook_add = '''
  " Vim起動時にneocompleteを有効にする
  let g:neocomplete#enable_at_startup = 1
  " smartcase有効化. 大文字が入力されるまで大文字小文字の区別を無視する
  let g:neocomplete#enable_smart_case = 1
  " 3文字以上の単語に対して補完を有効にする
  let g:neocomplete#min_keyword_length = 3
  " 区切り文字まで補完する
  let g:neocomplete#enable_auto_delimiter = 1
  " 1文字目の入力から補完のポップアップを表示
  let g:neocomplete#auto_completion_start_length = 1
  " バックスペースで補完のポップアップを閉じる
  inoremap <expr><BS> neocomplete#smart_close_popup()."<C-h>"
'''

[[plugins]] # tomlのシンタックスを有効に.
repo = 'cespare/vim-toml'

[[plugins]] # カーソル位置のコンテキストに合わせて filetype を切り替え.
repo = 'osyo-manga/vim-precious'
depends = ['Shougo/context_filetype.vim']

[[plugins]] # カーソル位置のコンテキストの filetype を判定するライブラリ.
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'tpope/vim-markdown'

[[plugins]]
repo = 'previm/previm'
hook_add = '''
  let g:previm_open_cmd = "open -a 'Google Chrome'"
'''

[[plugins]] # swift のシンタックスを有効に.
repo = 'apple/swift'
rtp = 'utils/vim' # vim プラグインがあるところまでのパスを指定.
on_ft = 'swift' # ファイルタイプが swift のものを開いた時にのみプラグインを読み込む.

[[plugins]] # Vimスクリプト基礎文法最速マスター( https://thinca.hatenablog.com/entry/20100201/1265009821 )を:help learn-vimscript で閲覧できる.
repo = 'mattn/learn-vimscript'

[[plugins]] # 閉じタグを自動で入力する.
repo = 'alvan/vim-closetag'
hook_add = '''
" 有効にするファイルの拡張子を指定する.
let g:closetag_filenames = '*.html'
'''

[[plugins]] # emmet
repo = 'mattn/emmet-vim'
hook_add = '''
let g:user_emmet_leader_key='<C-e>'
'''

[[plugins]] # ステータスラインのテーマ
repo = 'vim-airline/vim-airline'
depends = ['vim-airline-themes']
hook_add = '''
let g:airline_theme = 'tender'
'''

[[plugins]]
repo = 'vim-airline/vim-airline-themes'

[[plugins]] # "を打つと""に自動補完してくれる.
repo = 'Townk/vim-autoclose'

[[plugins]] # syntaxのチェック
repo =  'scrooloose/syntastic'
hook_add = '''
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
'''

[[plugins]] #  インデントを可視化.
repo = 'Yggdroot/indentLine'
hook_add = '''
let g:indentLine_char = '¦'
'''


