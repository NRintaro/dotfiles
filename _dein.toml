[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'prabirshrestha/async.vim'

[[plugins]]
repo = 'ryanolsonx/vim-lsp-javascript'

[[plugins]]
repo = 'prabirshrestha/asyncomplete.vim'
hook_add = '''
inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr>    pumvisible() ? "\<C-y>" : "\<cr>"
'''

[[plugins]]
repo = 'prabirshrestha/asyncomplete-lsp.vim'

[[plugins]]
repo = 'prabirshrestha/vim-lsp'
hook_add = '''
if executable('solargraph')
  " gem install solargraph
  augroup LspRuby
    au!
    au User lsp_setup call lsp#register_server({
          \ 'name': 'solargraph',
          \ 'cmd': {server_info->[&shell, &shellcmdflag, 'solargraph stdio']},
          \ 'initialization_options': {"diagnostics": "true"},
          \ 'whitelist': ['ruby'],
          \ })
  augroup END
endif

if executable('typescript-language-server')
  " npm install -g typescript typescript-language-server
  augroup LspTypeScript
    au!
    au User lsp_setup call lsp#register_server({
          \ 'name': 'typescript-language-server',
          \ 'cmd': {server_info->[&shell, &shellcmdflag, 'typescript-language-server --stdio']},
          \ 'root_uri':{server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_file_directory(lsp#utils#get_buffer_path(), 'tsconfig.json'))},
          \ 'whitelist': ['typescript', 'typescript.tsx', 'javascript', 'javascript.jsx'],
          \ })
  augroup END
endif

if executable('gopls')
  " go get -u golang.org/x/tools/cmd/gopls
  augroup LspGo
    au User lsp_setup call lsp#register_server({
        \ 'name': 'gopls',
        \ 'cmd': {server_info->['gopls', '-mode', 'stdio']},
        \ 'whitelist': ['go'],
        \ })
    autocmd BufWritePre *.go LspDocumentFormatSync
  augroup END
endif
'''

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
" NERDTreeを表示/非表示
nmap <silent> <Space>ne :NERDTreeToggle<CR>
" 隠しファイルを表示
let g:NERDTreeShowHidden=1
" 非表示ファイル
let g:NERDTreeIgnore=['\.swp$', '.DS_Store']
" 開いているウィンドウがNERDTreeだけならVimを閉じる
autocmd MyAutoCmd Bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
" NERDTreeを起動する.
autocmd MyAutoCmd VimEnter * execute 'NERDTree'
'''

#インストール方法メモ
#1. https://github.com/ryanoasis/nerd-fonts#font-installation のoption4: Homebrewでフォントをインストールする.
#2. 利用しているターミナルのフォントを手順1でインストールしたFontに変更する.iTerm2なら設定画面>Profiles>Text>Font>Change Fontから設定する.
#3. ryanoasis/vim-deviconsをインストールする.
[[plugins]] # 有名どころのVimプラグインにアイコンを追加する.
repo = 'ryanoasis/vim-devicons'

[[plugins]]
repo = '/usr/local/opt/fzf'

[[plugins]]
repo = '/usr/local/opt/the_silver_searcher'

[[plugins]] # ファイル検索.
repo = 'junegunn/fzf.vim'
depends = ['/usr/local/opt/fzf', '/usr/local/opt/the_silver_searcher']
hook_add = '''
fun! FzfOmniFiles()
  let is_git = system('git status')
  if v:shell_error
    :Files
  else
    :GitFiles
  endif
endfun

nnoremap <C-g> :Ag<Space>
nnoremap <C-d> :GFiles?<CR>
nnoremap <C-p> :call FzfOmniFiles()<CR>
nnoremap <C-c> :Commands<CR>
nnoremap <silent> <Space>h :History<CR>
let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-i': 'split',
  \ 'ctrl-s': 'vsplit'}
'''

[[plugins]] # カラースキームを設定
repo = 'tomasr/molokai'
hook_add = '''
set background=dark
" colorscheme 設定は source 後に行う必要があるので確実に読まれている VimEnter のタイミングで行う。
" 但し Colorscheme イベントの発生が抑制されないよう nented を付ける。
" TODO: nestedについて&auとautocmdの違いについて
autocmd MyAutoCmd VimEnter * nested colorscheme molokai
'''

[[plugins]] # ステータスライン
repo = 'itchyny/lightline.vim'

[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
" バッファを保存時に差分を認識する.
autocmd MyAutoCmd BufWritePost * GitGutter
" 差分を認識する間隔(ミリ秒).
" set updatetime=100
'''

[[plugins]]
repo = 'posva/vim-vue'
on_ft = 'vue'

[[plugins]]
repo = 'tomlion/vim-solidity'
on_ft = 'solidity'

[[plugins]] # tomlのシンタックスを有効に.
repo = 'cespare/vim-toml'
on_ft = 'toml' # ファイルタイプが toml のものを開いた時にのみプラグインを読み込む.

[[plugins]]
repo = 'jiangmiao/auto-pairs'

[[plugins]] #  インデントを可視化.
repo = 'Yggdroot/indentLine'
hook_add = '''
let g:indentLine_char = '¦'
'''

[[plugins]] # カーソル位置のコンテキストに合わせて filetype を切り替え.
repo = 'osyo-manga/vim-precious'
depends = ['Shougo/context_filetype.vim']

[[plugins]] # カーソル位置のコンテキストの filetype を判定するライブラリ.
repo = 'Shougo/context_filetype.vim'

[[plugins]] # ウィンドウサイズを変更.
repo = 'simeji/winresizer'
hook_add = '''
let g:winresizer_start_key = '<Space>w'
" enter で完了する.
let g:winresizer_keycode_finish = 13
'''

[[plugins]]
repo = 'previm/previm'
hook_add = '''
let g:previm_open_cmd = "open -a 'Google Chrome'"
command! Pre PrevimOpen
'''
on_ft = ['md', 'markdown'] # ファイルタイプが markdown のものを開いた時にのみプラグインを読み込む.

[[plugins]] # helpの日本語版
repo = 'vim-jp/vimdoc-ja'
hook_add = '''
set helplang=ja,en
'''
